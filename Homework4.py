# Задание 1

"""
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

"""
# Реализовано в salary_calc.py

# Задание 2

"""
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

"""
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
compare = 0
new_list = []
for el in my_list:
    if el > compare != 0:
        new_list.append(el)
    compare = el

print(new_list)


# Задание 3

"""
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор

"""

print([el for el in range(20, 240) if el % 20 == 0 or 0 == el % 21])

# Задание 4

"""
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""
my_list4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list4 = [el for el in my_list4 if my_list4.count(el) == 1]
print(new_list4)

# Задание 5

"""
Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

from functools import reduce

start = 100
stop = 1000
step = 2
stop = stop + step
my_list5 = [el for el in range(start, stop, step)]
print(my_list5)

# Решение через lambda
result = reduce(lambda prev_el, el: prev_el * el, my_list5)
print(result)


# Решение через обычную функуцию
def mult(prev_el, el):
    return prev_el * el


result = reduce(mult, my_list5)
print(result)

# Задание 6

"""
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, 
что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

from itertools import count
from itertools import cycle

n = int(input('Введите целое число: '))

for el in count(n):
    if el > n + 10:
        break
    else:
        print(el)


cnt = 0
for el in cycle([item for item in range(1, 4)]):
    if cnt == 10:
        break
    else:
        print(el)
    cnt += 1

# Задание 7

"""
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, 
начиная с 1! и до n!. Подсказка: факториал числа n — произведение чисел от 1 до n. 
 Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""


def fact(n):
    stop = n + 1
    for el in range(1, stop):
        yield el


n = int(input('введите целое число: '))
result6 = 1
fact_list = []
for el in fact(n):
    result6 = result6 * el
    fact_list.append(str(el))
fact_str = ' * '.join(fact_list)

print(f'Факториал числа {n}! = {fact_str} = {result6}')


